"""
Dashboard Streamlit ‚Äî l√™ do SQLite (via analise.py) e exibe an√°lises/gr√°ficos.
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import analise  # nossas fun√ß√µes utilit√°rias

st.set_page_config(page_title="An√°lise de Produ√ß√£o Industrial", layout="wide", page_icon="üìä")

# =============================
# 1) Carregar dados do SQLite
# =============================
@st.cache_data(show_spinner=True)
def carregar_dados_tratados() -> pd.DataFrame:
    # usa o pipeline de analise.py
    df = analise.get_processed_data()
    return df

df = carregar_dados_tratados()

# Guarda um alerta se o df estiver vazio
if df.empty:
    st.error("N√£o foi poss√≠vel carregar dados do banco. Rode o ETL (producao.py) primeiro.")
    st.stop()

# =============================
# 2) T√≠tulo e descri√ß√£o
# =============================
st.title("üìä An√°lise de Produ√ß√£o Industrial")
st.markdown(
    """
    Visualize **produ√ß√£o di√°ria, semanal e mensal**, **falhas por m√°quina** e uma
    **previs√£o simples** para o pr√≥ximo m√™s (m√©dia m√≥vel 3 meses).
    """
)

# =============================
# 3) Filtros
# =============================
col_f1, col_f2 = st.columns([2, 1])
with col_f1:
    maquinas = st.multiselect(
        "Selecione as m√°quinas:",
        options=sorted(df["maquina"].unique()),
        default=sorted(df["maquina"].unique()),
    )
with col_f2:
    intervalo = st.date_input(
        "Per√≠odo:",
        value=(df["data"].min().date(), df["data"].max().date()),
        min_value=df["data"].min().date(),
        max_value=df["data"].max().date(),
    )

# Aplica filtros com c√≥pia segura
df_filtrado = df[(df["maquina"].isin(maquinas)) &
                 (df["data"].between(pd.to_datetime(intervalo[0]), pd.to_datetime(intervalo[1])))]
df_filtrado = df_filtrado.copy()

# =============================
# 4) M√©tricas r√°pidas (cards)
# =============================
col1, col2, col3, col4 = st.columns(4)
with col1:
    st.metric("M√°quinas selecionadas", len(maquinas))
with col2:
    st.metric("Dias no per√≠odo", df_filtrado["data"].nunique())
with col3:
    st.metric("Pe√ßas (m√©dia di√°ria)", f"{df_filtrado['producao'].mean():,.0f}")
with col4:
    st.metric("Falhas (total)", int(df_filtrado["falhas"].sum()))

st.divider()

# =============================
# 5) Gr√°ficos principais
# =============================
plots, err = analise.create_plots(df_filtrado)
if err:
    st.error(err)
else:
    c1, c2 = st.columns(2)
    with c1:
        st.subheader("üîß Falhas por M√°quina")
        st.pyplot(plots["falhas_por_maquina"])
    with c2:
        st.subheader("üìÖ Produ√ß√£o M√©dia Di√°ria")
        st.pyplot(plots["producao_por_dia"])

    st.subheader("üìä Produ√ß√£o Mensal")
    st.pyplot(plots["producao_mensal"])

# =============================
# 6) Agrega√ß√µes (di√°ria, semanal, mensal)
# =============================
st.divider()
st.subheader("üìã Tabelas de Resumo")

# Di√°ria
base_diaria = (
    df_filtrado.groupby(["data", "maquina"], as_index=False)["producao"].mean()
    .sort_values(["data", "maquina"])
)
# Semanal
df_filtrado["semana"] = df_filtrado["data"].dt.to_period("W").apply(lambda r: r.start_time)
base_semanal = (
    df_filtrado.groupby(["semana", "maquina"], as_index=False)["producao"].mean()
    .sort_values(["semana", "maquina"])
)
# Mensal
df_filtrado["mes"] = df_filtrado["data"].dt.to_period("M").astype(str)
base_mensal = (
    df_filtrado.groupby(["mes", "maquina"], as_index=False)["producao"].mean()
    .sort_values(["mes", "maquina"])
)

tab1, tab2, tab3 = st.tabs(["Di√°ria", "Semanal", "Mensal"])
with tab1:
    st.dataframe(base_diaria)
with tab2:
    st.dataframe(base_semanal)
with tab3:
    st.dataframe(base_mensal.pivot(index="mes", columns="maquina", values="producao"))

# =============================
# 7) Previs√£o mensal simples
# =============================
st.divider()
st.subheader("üîÆ Previs√£o mensal (m√©dia m√≥vel 3 meses)")
prev = analise.monthly_forecast(df_filtrado)
if prev.empty:
    st.info("Sem dados suficientes para previs√£o.")
else:
    st.dataframe(prev)
